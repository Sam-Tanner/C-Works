#include <iostream>
#include <cmath>
using namespace std;

float pi=3.14159265;

class Circle
{
  //Defines private members of class
private:
  double rad;
  double xvalue;
  double yvalue;
  //Defines public members of class
public:
  Circle(double r, double x, double y) {rad=r;xvalue=x;yvalue=y;}
  Circle(double r, double x) {rad=r;xvalue=x;yvalue=0.0;}
  Circle(double r) {rad=r;xvalue=0.0;yvalue=0.0;}
  Circle() {rad=0.0;xvalue=0.0;yvalue=0.0;}
  //Functions that act on of call parts of the private members
  double getRadius(); double getX(); double getY(); double getArea();
  void show();
  friend Circle operator +
(const Circle& A, const Circle& B)
{ return Circle(sqrt(A.rad*A.rad+B.rad*B.rad),(A.xvalue+B.xvalue)/2,(A.yvalue+B.yvalue)/2);}
  friend ostream& operator<<
(ostream& os,const Circle& A)
{ os<<"Radius = "<<A.rad<<", at (x,y) = ("<<A.xvalue<<","<<A.yvalue<<")"<<endl; return os;}
};
double Circle:: getRadius(){return rad;}
double Circle:: getX(){return xvalue;}
double Circle:: getY(){return yvalue;}
double Circle::getArea(){return (rad*rad*pi);}
void Circle::show(){cout<<"Radius of:"<<rad<<", X position:"<<xvalue<<", Y position:"<<yvalue<<endl;}

//friend Circle operator +
//(const Circle& A, const Circle& B)
//{ return Circle(sqrt(A.rad*A.rad+B.rad*B.rad),(A.xvalue+B.xvalue)/2,(A.yvalue+B.yvalue)/2);}

//friend ostream& operator<<
//(ostream& os,const Circle& A)
//{ os<<'Radius ='<<A.rad<<', at (x,y) =('<<A.xvalue<<','<<A.yvalue<<')'<<endl; return os;}
